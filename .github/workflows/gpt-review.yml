name: Automated Code Review

on:
  pull_request:
    types: [opened, synchronize]

permissions:
  contents: read
  pull-requests: write

jobs:
  review:
    runs-on: ubuntu-latest
    name: GPT-4 Code Review
    
    steps:
      - name: 'Set PR Fetch Depth'
        run: echo "PR_FETCH_DEPTH=$(( ${{ github.event.pull_request.commits }} + 1 ))" >> "${GITHUB_ENV}"

      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: ${{ env.PR_FETCH_DEPTH }}

      - name: Custom Code Review and Comment
        uses: actions/github-script@v6
        env:
          FILE_PATTERN: '*.cpp *.h *.txt *.md *.glsl *.yml *.json'
          CUSTOM_PROMPT: 'Please review the code from the following code diff:'
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        with:
          script: |
            (async () => {
              const { execSync } = require('child_process');
              
              const prNumber = context.payload.pull_request.number;
              const customPrompt = process.env.CUSTOM_PROMPT;
              
              // Get list of modified files in the PR
              const modifiedFiles = execSync(`git diff --name-only ${{ github.event.pull_request.base.sha }} HEAD`).toString().trim().split('\n');

              const comments = [];
              
              for (const file of modifiedFiles) {
                const diff = execSync(`git diff ${{ github.event.pull_request.base.sha }} HEAD -- ${file}`).toString();
              
                // GPT-4 review payload
                const payload = {
                  model: 'gpt-4',
                  max_tokens: 5000,
                  messages: [
                    {
                      role: 'user',
                      content: `${customPrompt} ${diff}`
                    }
                  ]
                };
              
                // Send to GPT-4 and get review
                try {
                  const response = await fetch('https://api.openai.com/v1/chat/completions', {
                    method: 'POST',
                    headers: {
                      'Authorization': `Bearer ${process.env.OPENAI_API_KEY}`,
                      'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(payload)
                  });

                  if (response.ok) {
                    const responseData = await response.json();
                    const reviewText = responseData.choices[0].message.content;

                    comments.push({
                        path: file,
                        position: 1,
                        body: reviewText
                    });
                  } 
                  else {
                    // Log error response
                    const errorResponse = await response.text();
                    console.log(`Error from OpenAI API: HTTP status ${response.status}: ${errorResponse}`);
                  }
                } 
                catch (error) {
                  // Catch and log any error that occurs during the fetch operation
                  console.log(`Error while calling OpenAI API: ${error.message}`);
                }
              }

              await github.rest.pulls.createReview({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: prNumber,
                review_id: 1,
                event: 'REQUEST_CHANGES',
                comments: comments
              });
            })();
        
