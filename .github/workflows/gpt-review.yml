name: Automated Code Review

on:
  pull_request:
    types: [opened, synchronize]

permissions:
  contents: read
  pull-requests: write

jobs:
  review:
    runs-on: ubuntu-latest
    name: GPT-4 Code Review
    
    steps:
      - name: 'Set PR Fetch Depth'
        run: echo "PR_FETCH_DEPTH=$(( ${{ github.event.pull_request.commits }} + 1 ))" >> "${GITHUB_ENV}"

      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: ${{ env.PR_FETCH_DEPTH }}

      - name: Custom Code Review and Comment
        uses: actions/github-script@v6
        env:
          FILE_PATTERN: '*.cpp *.h *.md *.glsl *.yml *.json'
          CUSTOM_PROMPT: 'Analyze the following code snippet and identify any issues, such as syntax errors, logical errors, potential bugs, performance issues, non-adherence to best practices, or security vulnerabilities. For each issue identified, specify the file name, the line number (approximate if exact is not determinable), and a brief description of the issue. Format your response as a list of issues, each described succinctly.'
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        with:
          script: |
            (async () => {
              const { execSync } = require('child_process');
              
              const prNumber = context.payload.pull_request.number;
              const customPrompt = process.env.CUSTOM_PROMPT;
              const filePattern = process.env.FILE_PATTERN;
              
              // Get list of modified files in the PR
              const modifiedFiles = execSync(`git diff --name-only ${{ github.event.pull_request.base.sha }} HEAD`).toString().trim().split('\n');

              let comments = [];
              
              for (const file of modifiedFiles) {
                const diff = execSync(`git diff ${{ github.event.pull_request.base.sha }} HEAD -- ${file}`).toString();

                const prompt     = `${customPrompt} ${diff}`;
                const max_tokens = Math.ceil(prompt.length / 4)
              
                // GPT-4 review payload
                const payload = {
                  model: 'gpt-4-turbo-preview',
                  max_tokens: max_tokens,
                  messages: [
                    {
                      role: 'user',
                      content: `prompt`
                    }
                  ]
                };
              
                // Send to GPT-4 and get review
                try {
                  const response = await fetch('https://api.openai.com/v1/chat/completions', {
                    method: 'POST',
                    headers: {
                      'Authorization': `Bearer ${process.env.OPENAI_API_KEY}`,
                      'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(payload)
                  });
                
                  if (response.ok) {
                    const responseData = await response.json();
                    const reviewTexts =  responseData.choices[0].message.content.split('\n').filter(line => line.trim() !== '');
                    const fileComments = reviewTexts.map(reviewText => {
                      // Assuming the reviewText format is "filename:line: issue description"
                      const parts = reviewText.split(':');
                      const file = parts[0].trim();
                      const line = parseInt(parts[1], 10) || 0; // Default to 0 if line number is not clear
                      const body = parts.slice(2).join(':').trim();
                      return {
                        path: file,
                        position: line,
                        body: body
                      };
                    });
                    
                    comments = comments.concat(fileComments);
                  }
                  else {
                    const errorResponse = await response.text();
                    console.error(`Error from OpenAI API: HTTP status ${response.status}: ${errorResponse}`);
                  }
                } 
                catch (error) {
                  console.error(`Error while calling OpenAI API: ${error.message}`);
                }               
              }

              await github.rest.pulls.createReview({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: prNumber,
                review_id: 1,
                event: 'REQUEST_CHANGES',
                comments: comments
              });
            })();
        